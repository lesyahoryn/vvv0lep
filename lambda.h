//***************************************************************************************************************************************************************
//
// One lepton SF derivation region
//
//***************************************************************************************************************************************************************

//===============================================================================================================================================================
// Variable to categorize the fat-jet truth matching top v. w v. qb v. q v. b v. other
// This is for one lepton region for scale factor computation
auto fjcateg = [&]()
{
    if (vvv.NLGen0() == 2 and vvv.NBGen0() == 1)// qqb (top)
    {
        return 0;
    }
    else if (vvv.NLGen0() == 2 and vvv.NBGen0() == 0)// qq (W)
    {
        return 1;
    }
    else if (vvv.NLGen0() == 1 and vvv.NBGen0() == 1)// qb
    {
        return 2;
    }
    else if (vvv.NLGen0() == 1 and vvv.NBGen0() == 0)// q
    {
        return 3;
    }
    else if (vvv.NLGen0() == 0 and vvv.NBGen0() == 1)// b
    {
        return 4;
    }
    else
    {
        return 5;
    }
};




// -------------------====================-------------------====================-------------------====================-------------------====================
// -------------------====================-------------------====================-------------------====================-------------------====================
// -------------------====================-------------------====================-------------------====================-------------------====================
// -------------------====================-------------------====================-------------------====================-------------------====================






//***************************************************************************************************************************************************************
//
// Common functions
//
//***************************************************************************************************************************************************************

auto VWP = [&, year]()
{
    if (year == 2006) return 0.8f;
    else if (year == 2016) return 0.8f;
    else if (year == 2017) return 0.8f;
    else if (year == 2018) return 0.8f;
    else return 999.f;
};







// -------------------====================-------------------====================-------------------====================-------------------====================
// -------------------====================-------------------====================-------------------====================-------------------====================
// -------------------====================-------------------====================-------------------====================-------------------====================
// -------------------====================-------------------====================-------------------====================-------------------====================






//***************************************************************************************************************************************************************
//
// 2 FJ analysis variables
//
//***************************************************************************************************************************************************************

//===============================================================================================================================================================
// Distance in 2d space of FJi.mass from a provided center (x, x) where x is all same e.g. (85 GeV, 85 GeV)
auto dist_2d = [&] (float center)
{
    if (vvv.NFJ() < 2)
        return -999.f;
    else
        return float(sqrt(pow(vvv.FJ0().mass() - center, 2) + pow(vvv.FJ1().mass() - center, 2)));
};

//===============================================================================================================================================================
// In, out, shell of the sphere
auto is_inside_2d = [&] () { return dist_2d(85) < 35; };
auto is_outside_2d = [&] () { return dist_2d(85) > 50; };
auto is_shell_2d = [&] () { return dist_2d(85) >= 35 and dist_2d(85) <= 50; };






// -------------------====================-------------------====================-------------------====================-------------------====================
// -------------------====================-------------------====================-------------------====================-------------------====================
// -------------------====================-------------------====================-------------------====================-------------------====================
// -------------------====================-------------------====================-------------------====================-------------------====================






//***************************************************************************************************************************************************************
//
// 3 FJ analysis variables
//
//***************************************************************************************************************************************************************

//===============================================================================================================================================================
// Distance in 3d space of FJi.mass from a provided center (x, x, x) where x is all same e.g. (85 GeV, 85 GeV, 85 GeV)
auto dist_3d = [&] (float center)
{
    if (vvv.NFJ() < 3)
        return -999.f;
    else
        return float(sqrt(pow(vvv.FJ0().mass() - center, 2) + pow(vvv.FJ1().mass() - center, 2) + pow(vvv.FJ2().mass() - center, 2)));
};

//===============================================================================================================================================================
// In, out, shell of the sphere
auto is_inside_3d = [&] () { return dist_3d(85) < 35; };
auto is_outside_3d = [&] () { return dist_3d(85) > 50; };
auto is_shell_3d = [&] () { return dist_3d(85) >= 35 and dist_3d(85) <= 50; };

//===============================================================================================================================================================
// Based on the score cut define 8 regions region 8 == all pass region 1 == all fail and 5 - 7 is when two passes 2 - 4 is when only one pass
// This is to define side-bands
auto vmd_reg_3d = [&]()
{
    if (vvv.NFJ() < 3)
    {
        return 0;
    }
    else
    {
        bool pass0 = vvv.VMD0() > VWP();
        bool pass1 = vvv.VMD1() > VWP();
        bool pass2 = vvv.VMD2() > VWP();
        if (pass0 and pass1 and pass2)
        {
            return 8;
        }
        else if (pass0 and pass1 and not pass2)
        {
            return 7;
        }
        else if (pass0 and not pass1 and pass2)
        {
            return 6;
        }
        else if (not pass0 and pass1 and pass2)
        {
            return 5;
        }
        else if (pass0 and not pass1 and not pass2)
        {
            return 4;
        }
        else if (not pass0 and pass1 and not pass2)
        {
            return 3;
        }
        else if (not pass0 and not pass1 and pass2)
        {
            return 2;
        }
        else if (not pass0 and not pass1 and not pass2)
        {
            return 1;
        }
        else
        {
            return 0; // technically should never be here
        }
    }
};
